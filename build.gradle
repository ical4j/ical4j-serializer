plugins {
    id 'java'
    id 'groovy'
    id "biz.aQute.bnd.builder" version "5.1.2"
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
}

repositories {
    mavenCentral()
    // sonatype snapshots
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    api "org.mnode.ical4j:ical4j:$ical4jVersion",
            "org.mnode.ical4j:ical4j-vcard:$ical4jVCardVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion"

    compileOnly 'org.osgi:osgi.core:8.0.0',
            'org.osgi:org.osgi.service.component.annotations:1.5.0',
            'org.osgi:org.osgi.service.metatype.annotations:1.4.1',
            'org.osgi:org.osgi.annotation:6.0.0'

    testImplementation "org.slf4j:slf4j-log4j12:$slf4jVersion",
            "org.apache.logging.log4j:log4j:$log4jVersion"

    testImplementation "org.codehaus.groovy:groovy:$groovyVersion"

    testImplementation platform("org.spockframework:spock-bom:$spockVersion"),
        "org.spockframework:spock-core",
        "org.slf4j:slf4j-log4j12:$slf4jVersion",
        "org.apache.logging.log4j:log4j:$log4jVersion"

}

test {
    useJUnitPlatform()
}

javadoc {
    options {
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/',
            'http://ical4j.github.io/docs/ical4j/api/3.1.0/',
            'http://fasterxml.github.io/jackson-core/javadoc/2.13/',
            'http://fasterxml.github.io/jackson-databind/javadoc/2.13/',
            'http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.13/'
    }
}

scmVersion {
    tag {
        prefix = 'ical4j-serializer-'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = ['main': 'simple']
}

group = 'org.ical4j'
description = 'Custom marshalling between iCal4j objects and JSON formats'
version = scmVersion.version

jar {
    manifest {
        attributes (
                'Implementation-Title': 'iCal4j Serializer',
                'Implementation-Version': version,
                'Implementation-Vendor': 'Ben Fortuna'
        )
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

publishing {
    publications {
        ical4j_serializer(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
            pom.withXml {
                asNode().appendNode('name', project.name)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', 'http://ical4j.github.io')

                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('url', 'https://github.com/ical4j/ical4j-serializer')
                scmNode.appendNode('connection', 'scm:git@github.com:ical4j/ical4j-serializer.git')
                scmNode.appendNode('developerConnection', 'scm:git@github.com:ical4j/ical4j-serializer.git')

                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'iCal4j - License')
                licenseNode.appendNode('url', 'https://raw.githubusercontent.com/ical4j/ical4j/master/LICENSE')
                licenseNode.appendNode('distribution', 'repo')

                def developerNode = asNode().appendNode('developers').appendNode('developer')
                developerNode.appendNode('id', 'fortuna')
                developerNode.appendNode('name', 'Ben Fortuna')
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = version.endsWith('SNAPSHOT') ? "https://s01.oss.sonatype.org/content/repositories/snapshots/" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
//        maven {
//            name = "GitHubPackages"
//            url = uri("https://maven.pkg.github.com/ical4j/ical4j")
//            credentials {
//                username = System.getenv("GPR_USERNAME")
//                password = System.getenv("GPR_TOKEN")
//            }
//        }
    }
}

signing {
    required { isReleaseVersion }
    sign publishing.publications.ical4j_serializer
}
